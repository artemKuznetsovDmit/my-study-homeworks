<?php


//     1. Задайте массив textStorage в глобальной области видимости для хранения текстов: массив с числовыми индексами, каждый элемент которого будет также являться ассоциативным массивом вида с ключами title и text — для заголовка и текста соответственно. Например, заголовок для первого текста можно будет получить так: $textStorage[0][‘title’]
$textStorage = [];

//     2. Реализуйте функцию add для добавления нового текста в массив. Функция должна принимать на вход два текстовых параметра — title и text (заголовок и текст соответственно), и при этом ничего не возвращать. Функция должна иметь доступ к массиву с текстами — его также можно передать в качестве параметра. Помните про особенности передачи параметров по ссылке и значению.   
function add(string $title, string $text, array &$textStorage)
{
    $textStorage[] = ['title' =>  $title, 'text' => $text];
}


//     3. Попробуйте вызвать функцию add два раза, передав ей необходимые параметры, после чего выведете содержимое массива textStorage любым удобным способом. Если вы все сделали правильно, то в нём будет два элемента, содержащих переданные заголовки и тексты. 
echo '---------3---------', PHP_EOL;

add('title_test', 'text_test', $textStorage);
add('title_test11', 'text_test11', $textStorage);
echo $textStorage[1]['title'] . ' ' . $textStorage[1]['text'], PHP_EOL;
var_dump($textStorage);


//     4. Реализуйте функцию remove для удаления конкретного текста из массива. На выходе функция должна принимать номер текста (соответствующий индексу в массиве) и массив с текстами, а возвращать true в случае, если такой номер (индекс) существует, и false, если такого номера (индекса) в массиве не оказалось. 
function remove(int $noteNumber, array &$textStorage)
{
    if (isset($textStorage[$noteNumber])) {
        unset($textStorage[$noteNumber]);
        return true;
    }
    return false;
};

//     5. Вызовете функцию remove несколько раз, сначала с параметром 0, а затем с параметром 5, и выведете значение, которое она вернёт на экран. 
echo '---------5---------', PHP_EOL;
var_dump(remove(0, $textStorage));
var_dump(remove(5, $textStorage));

//     6. Если до этого вы вызвали функцию add два раза, то у вас должно было быть два текста в массиве. После вызова remove с указанными параметрами должен остаться только второй текст. Чтобы убедиться в этом, выведете содержимое массива textStorage любым удобным способом.
echo '---------6---------', PHP_EOL;
var_dump($textStorage);

//    7. Реализуйте функцию редактирования edit. Суть функции редактирования состоит в том, что мы должны иметь возможность обновить текст или заголовок выбранного элемента массива. То есть задать новое значение конкретному элементу. Таким образом, на входе функция должна принимать четыре параметра:
// первый — это номер (индекс) текста в массиве; 
// второй — заголовок (title); 
// третий — сам текст; 
// четвёртый — это массив с текстами. 
// Самостоятельно определите подходящие типы данных для всех параметров и укажите их при инициализации функции. Пусть функция возвращает true, если текст с нужным индексом существует, и false, если вдруг такого текста в массиве не оказалось.
function edit(
    int  $noteNumber,
    string $title = null,
    string $text = null,
    array &$textStorage
) {
    if (isset($textStorage[$noteNumber])) {
        if (isset($title)) {
            $textStorage[$noteNumber]['title'] = $title;
        }
        if (isset($text)) {
            $textStorage[$noteNumber]['text'] = $text;
        }
        return true;
    }
    return false;
}

//     8. Вызовите edit для первого текста и попробуйте обновить заголовок.
edit(
    noteNumber: 1,
    title: 'title_test_edit',
    textStorage: $textStorage
);
//     9. Выведите textStorage любым удобным способом и убедитесь, что данные сохранились.
echo '---------9---------', PHP_EOL;
var_dump($textStorage);
//     10. Попробуйте вызвать edit с заведомо несуществующим индексом и убедитесь, что функция возвращает false.
echo '---------10---------', PHP_EOL;
var_dump(edit(noteNumber: 8, textStorage: $textStorage));

//     11. Если все работает правильно — сделайте коммит ваших изменений с помощью Git и отправьте свой коммит в репозиторий.



// Советы и рекомендации
// Определяя название ветки, merge request и содержание commit message, старайтесь писать что-то, что отражает смысл вашего кода.
// Повторите тему «Передача параметров по ссылкам и по значению».
// Не забывайте правильно указывать типы параметров и возвращаемых значений. Помните,что для стороннего программиста ваша функция — это «чёрный ящик». 
// $textStorage = [];
